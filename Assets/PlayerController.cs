//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerController: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerController()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""742c273c-6b67-4a97-8ee4-cb2e6c2bd693"",
            ""actions"": [
                {
                    ""name"": ""Bater"",
                    ""type"": ""Button"",
                    ""id"": ""52dd5976-ce34-477a-9e45-4793d487b743"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interagir"",
                    ""type"": ""Button"",
                    ""id"": ""c6a0d60a-209a-4826-8179-1b3a9b5334f6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Localizar"",
                    ""type"": ""Button"",
                    ""id"": ""a62fc852-20b7-4d4c-88ab-3ebfab65eeee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f5eb8d79-0098-4b1c-a3ca-3ea65d8dba08"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Bater"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b7646e8c-ec7c-4bd9-aaf4-c82d0def008b"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interagir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e2977594-c5a0-4939-bf09-89d635c7d3d4"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Localizar"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Bater = m_Gameplay.FindAction("Bater", throwIfNotFound: true);
        m_Gameplay_Interagir = m_Gameplay.FindAction("Interagir", throwIfNotFound: true);
        m_Gameplay_Localizar = m_Gameplay.FindAction("Localizar", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private List<IGameplayActions> m_GameplayActionsCallbackInterfaces = new List<IGameplayActions>();
    private readonly InputAction m_Gameplay_Bater;
    private readonly InputAction m_Gameplay_Interagir;
    private readonly InputAction m_Gameplay_Localizar;
    public struct GameplayActions
    {
        private @PlayerController m_Wrapper;
        public GameplayActions(@PlayerController wrapper) { m_Wrapper = wrapper; }
        public InputAction @Bater => m_Wrapper.m_Gameplay_Bater;
        public InputAction @Interagir => m_Wrapper.m_Gameplay_Interagir;
        public InputAction @Localizar => m_Wrapper.m_Gameplay_Localizar;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void AddCallbacks(IGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_GameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Add(instance);
            @Bater.started += instance.OnBater;
            @Bater.performed += instance.OnBater;
            @Bater.canceled += instance.OnBater;
            @Interagir.started += instance.OnInteragir;
            @Interagir.performed += instance.OnInteragir;
            @Interagir.canceled += instance.OnInteragir;
            @Localizar.started += instance.OnLocalizar;
            @Localizar.performed += instance.OnLocalizar;
            @Localizar.canceled += instance.OnLocalizar;
        }

        private void UnregisterCallbacks(IGameplayActions instance)
        {
            @Bater.started -= instance.OnBater;
            @Bater.performed -= instance.OnBater;
            @Bater.canceled -= instance.OnBater;
            @Interagir.started -= instance.OnInteragir;
            @Interagir.performed -= instance.OnInteragir;
            @Interagir.canceled -= instance.OnInteragir;
            @Localizar.started -= instance.OnLocalizar;
            @Localizar.performed -= instance.OnLocalizar;
            @Localizar.canceled -= instance.OnLocalizar;
        }

        public void RemoveCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_GameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_GameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnBater(InputAction.CallbackContext context);
        void OnInteragir(InputAction.CallbackContext context);
        void OnLocalizar(InputAction.CallbackContext context);
    }
}
